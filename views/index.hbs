<h1>{{title}}</h1>
<ul id="messages">
</ul>
<form id="message-input">
	<input id="msg" autocomplete="off" />
    <button>Send</button>
</form>
<form id="auth">
	<input id="username"/>
	<input id="password"/>
	<button>login</button>
</form>
<form id="register">
    <input id="username_reg"/>
    <input id="password_reg"/>
    <button>register</button>
</form>
<form id="search">
    <input id="searchquery" />
    <button>Search</button>
</form>
<form id="addfriend">
    <ul id="users">
        <li>Search for users to add friends.</li>
    </ul>
    <button>Add Friend</button>
</form>
<p>Friendlist:</p>
<ul id="friendlist">
</ul>
<form id="acceptfriendrequest">
    <p>Open friendrequests:</p>
    <ul id="friendrequests">
    </ul>
    <button>Accept friendrequest</button>
</form>
<script src="/socket.io/socket.io.js"></script>
<script>
	var socket = io();
	let auth_token = '';
	let user_selected = '';

	$("#message-input").submit(event =>
    {
		event.preventDefault();
		let msg = $('#msg');
		socket.emit('send message', msg.val());
		msg.val('');
	});

	//Get the auth token with username and password
	$('#auth').submit(event =>
    {
		event.preventDefault();
		let combo = {'user': $('#username').val(), 'pass': $('#password').val()};
		socket.emit('get token', combo);
	});

	//Create account with username and password
    $('#register').submit(event =>
    {
        event.preventDefault();
        let combo = {'user': $('#username_reg').val(), 'pass': $('#password_reg').val()};
        socket.emit('register', combo);

        console.log()
    });

    //Executes the search
    $('#search').submit(event =>
    {
        event.preventDefault();
        var searchquery = $('#searchquery').val();
        socket.emit('searchuser', searchquery);
    });

    //Executes the search
    $('#addfriend').submit(event =>
    {
        event.preventDefault();

        if (user_selected === '')
            return;

        socket.emit('addfriend', user_selected);
    });

    // Lists friendrequests
    socket.on('friendrequests', friendrequests =>
    {
        recent_friendrequests = friendrequests;
        let counter = 0;
        $('#friendrequests').empty();
        friendrequests.forEach(function(friendrequest)
        {
            counter++;
            let elem = $('<li>').html("(" + counter + ") " + friendrequest.requester + ' wants to add you');
            $('#friendrequests').append(elem);
        });

        // List to choose for friendrequests
        $("#friendrequests li").click(function()
        {
            $("#friendrequests li").css("color","inherit");
            $(this).css("color","green");
            console.log(this.textContent);
            let friendrequest_selected = this.textContent;

            // Click accept
            $('#acceptfriendrequest').submit(event =>
            {
                event.preventDefault();

                if (friendrequest_selected === '')
                    return;

                var array_idx = parseInt(friendrequest_selected.charAt(1));
                var friendrequest = friendrequests[array_idx - 1];
                friendrequest.status = 'accepted';

                socket.emit('answer friendrequest', friendrequest);
            });
        });
    });

    //Gets recent friendlist
    socket.on('friendlist', friends =>
    {
        $('#friendlist').empty();
        friends.forEach(function(username)
        {
            let elem = $('<li>').html(username);
            $('#friendlist').append(elem);
        });
    });

    //Sends the found user profiles to the user
    socket.on('search finished', search =>
    {
        $('#users').empty();
        search.forEach(function(username)
        {
            let elem = $('<li>').html(username);
            elem[0].style.color = 'inherit';
            $('#users').append(elem);
        });

        $("#users li").click(function()
        {
            $("#users li").css("color","inherit");
            $(this).css("color","green");
            console.log(this.textContent);
            user_selected = this.textContent;
        });
    });

    //Displays the new message on the screen
    socket.on('new message', msg =>
    {
        //Escape User Strings
        var escaped_author = $('<div>').text(msg.author).html();
        var escaped_message = $('<div>').text(msg.msg).html();

        let elem = $('<li>').html( '<b>'+escaped_author+'</b>: ' + escaped_message);
        $('#messages').append(elem);
    });

    //Use the auth token to sign in once it's returned by the server
	socket.on('token', token =>
    {
		auth_token = token;
		socket.emit('auth', token);
		console.log(token);
	});
</script>